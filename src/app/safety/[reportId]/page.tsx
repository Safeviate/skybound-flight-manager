

'use client';

import { useFormState, useFormStatus } from 'react-dom';
import Header from '@/components/layout/header';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { safetyReportData as initialSafetyReports } from '@/lib/mock-data';
import type { SafetyReport, SuggestInvestigationStepsOutput, GenerateCorrectiveActionPlanOutput, CorrectiveAction } from '@/lib/types';
import { suggestStepsAction, generatePlanAction } from './actions';
import { AlertCircle, ArrowRight, Bot, ClipboardList, Info, Lightbulb, ListChecks, Loader2, User, Users, FileText, Target, Milestone, Upload, MoreHorizontal, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useEffect, useState, useTransition } from 'react';
import { Separator } from '@/components/ui/separator';
import { InvestigationTeamForm } from './investigation-team-form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ICAO_OCCURRENCE_CATEGORIES } from '@/lib/types';
import { DiscussionSection } from './discussion-section';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { ICAO_CODE_DEFINITIONS } from '@/lib/icao-codes';
import { Input } from '@/components/ui/input';
import { RiskAssessmentModule } from './risk-assessment-module';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { differenceInDays, parseISO } from 'date-fns';

const getStatusVariant = (status: SafetyReport['status']) => {
  switch (status) {
    case 'Open': return 'destructive';
    case 'Under Review': return 'warning';
    case 'Closed': return 'success';
    default: return 'outline';
  }
};

function SuggestStepsButton() {
    const { pending } = useFormStatus();
    return (
      <Button type="submit" disabled={pending}>
        {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Lightbulb className="mr-2 h-4 w-4" />}
        Suggest Investigation Steps
      </Button>
    );
}

function GeneratePlanButton() {
    const { pending } = useFormStatus();
    return (
      <Button variant="secondary" type="submit" disabled={pending}>
        {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <FileText className="mr-2 h-4 w-4" />}
        Generate Corrective Action Plan
      </Button>
    );
}

function InvestigationAnalysisResult({ data }: { data: SuggestInvestigationStepsOutput }) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Bot /> AI-Suggested Investigation Plan</CardTitle>
          <CardDescription>
            This plan was generated by AI to guide your investigation. Always use your professional judgment.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div>
            <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><ClipboardList /> Initial Assessment</h3>
            <p className="text-muted-foreground bg-muted p-3 rounded-md">{data.initialAssessment}</p>
          </div>
          <div className="grid md:grid-cols-2 gap-6">
             <div>
                <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><ListChecks /> Key Areas to Investigate</h3>
                <ul className="list-disc list-inside space-y-1 text-muted-foreground">
                    {data.keyAreasToInvestigate.map((item, i) => <li key={i}>{item}</li>)}
                </ul>
             </div>
             <div>
                <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><AlertCircle /> Recommended Immediate Actions</h3>
                <ul className="list-disc list-inside space-y-1 text-muted-foreground">
                    {data.recommendedActions.map((item, i) => <li key={i}>{item}</li>)}
                </ul>
             </div>
          </div>
           <div>
            <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><Users /> Potential Contributing Factors</h3>
            <div className="flex flex-wrap gap-2">
                {data.potentialContributingFactors.map((item, i) => <Badge key={i} variant="secondary">{item}</Badge>)}
            </div>
          </div>
        </CardContent>
      </Card>
    );
}

interface CorrectiveActionPlanResultProps {
    data: GenerateCorrectiveActionPlanOutput;
    reportStatus: SafetyReport['status'];
    onCloseReport: () => void;
}

function CorrectiveActionPlanResult({ data, reportStatus, onCloseReport }: CorrectiveActionPlanResultProps) {
    const [plan, setPlan] = useState(data);
    const { toast } = useToast();

    useEffect(() => {
        setPlan(data);
    }, [data]);

    const handleStatusChange = (index: number, newStatus: CorrectiveAction['status']) => {
        const updatedActions = [...plan.correctiveActions];
        updatedActions[index].status = newStatus;
        setPlan(prev => ({ ...prev, correctiveActions: updatedActions }));
        toast({ title: "Status Updated", description: `Action status changed to "${newStatus}".` });
    };

    const getStatusVariant = (status: string) => {
        switch(status) {
            case 'Completed': return 'success';
            case 'In Progress': return 'warning';
            default: return 'outline';
        }
    };

    const getTimelineInfo = (deadline: string) => {
        const today = new Date();
        const deadlineDate = parseISO(deadline);
        const days = differenceInDays(deadlineDate, today);

        if (days < 0) return <Badge variant="destructive">Overdue by {-days}d</Badge>;
        if (days <= 7) return <Badge variant="warning">{days}d remaining</Badge>;
        return <span className="text-muted-foreground">{days}d remaining</span>;
    };
    
    const allActionsCompleted = plan.correctiveActions.every(action => action.status === 'Completed');

    return (
        <Card>
            <CardHeader>
                <CardTitle className="flex items-center gap-2"><Bot /> AI-Generated Corrective Action Plan</CardTitle>
                <CardDescription>
                    Based on the complete investigation, this is a draft corrective action plan. You can update the status below.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
                <div>
                    <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><FileText /> Summary of Findings</h3>
                    <p className="text-muted-foreground bg-muted p-3 rounded-md">{plan.summaryOfFindings}</p>
                </div>
                <div>
                    <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><Target /> Root Cause Analysis</h3>
                    <p className="text-muted-foreground bg-muted p-3 rounded-md">{plan.rootCause}</p>
                </div>
                <div>
                    <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><Milestone /> Corrective Actions</h3>
                    <div className="overflow-x-auto">
                        <Table>
                            <TableBody>
                                {plan.correctiveActions.map((action, i) => (
                                    <React.Fragment key={i}>
                                        <TableRow className="bg-muted/50">
                                            <TableCell colSpan={5} className="font-medium">
                                                {action.action}
                                            </TableCell>
                                        </TableRow>
                                        <TableRow>
                                            <TableCell className="w-[25%]">
                                                <Label>Responsible</Label>
                                                <div>{action.responsiblePerson}</div>
                                            </TableCell>
                                            <TableCell className="w-[20%]">
                                                <Label>Timeline</Label>
                                                <div>{getTimelineInfo(action.deadline)}</div>
                                            </TableCell>
                                            <TableCell className="w-[20%]">
                                                <Label>Status</Label>
                                                <DropdownMenu>
                                                    <DropdownMenuTrigger asChild>
                                                        <Button variant="outline" size="sm" className="w-full justify-start mt-1" disabled={reportStatus === 'Closed'}>
                                                            <Badge variant={getStatusVariant(action.status)}>{action.status}</Badge>
                                                        </Button>
                                                    </DropdownMenuTrigger>
                                                    <DropdownMenuContent>
                                                        <DropdownMenuItem onClick={() => handleStatusChange(i, 'Not Started')}>Not Started</DropdownMenuItem>
                                                        <DropdownMenuItem onClick={() => handleStatusChange(i, 'In Progress')}>In Progress</DropdownMenuItem>
                                                        <DropdownMenuItem onClick={() => handleStatusChange(i, 'Completed')}>Completed</DropdownMenuItem>
                                                    </DropdownMenuContent>
                                                </DropdownMenu>
                                            </TableCell>
                                            <TableCell className="w-[15%]">
                                                <Label>Proof</Label>
                                                <Button variant="outline" size="sm" className="w-full mt-1" disabled={reportStatus === 'Closed'}>
                                                    <Upload className="mr-2 h-4 w-4" />
                                                    Upload
                                                </Button>
                                            </TableCell>
                                            <TableCell className="text-right w-[20%]">
                                                <Label>Actions</Label>
                                                <Button variant="ghost" size="sm" className="w-full mt-1" disabled={reportStatus === 'Closed'}>Re-assign</Button>
                                            </TableCell>
                                        </TableRow>
                                    </React.Fragment>
                                ))}
                            </TableBody>
                        </Table>
                    </div>
                </div>
            </CardContent>
             {allActionsCompleted && reportStatus !== 'Closed' && (
                <CardFooter className="flex justify-end">
                    <Button onClick={onCloseReport}>
                        <CheckCircle className="mr-2 h-4 w-4" />
                        Close & Archive Report
                    </Button>
                </CardFooter>
            )}
        </Card>
    );
}

export default function SafetyReportInvestigationPage({ params }: { params: { reportId: string } }) {
  const [safetyReports, setSafetyReports] = useState(initialSafetyReports);
  const report = safetyReports.find(r => r.id === params.reportId);
  const { toast } = useToast();
  
  const [suggestStepsState, suggestStepsFormAction] = useFormState(suggestStepsAction, { message: '', data: null, errors: null });
  const [generatePlanState, generatePlanFormAction] = useFormState(generatePlanAction, { message: '', data: null, errors: null });

  const handleReportUpdate = (updatedReport: SafetyReport) => {
    setSafetyReports(prevReports => prevReports.map(r => r.id === updatedReport.id ? updatedReport : r));
  };

  const handleCloseReport = () => {
    if (report) {
      const updatedReport = { ...report, status: 'Closed' as SafetyReport['status'] };
      handleReportUpdate(updatedReport);
      toast({
        title: "Report Closed",
        description: `Report ${report.reportNumber} has been successfully closed and archived.`
      });
    }
  };
  
  useEffect(() => {
    if (suggestStepsState.message && suggestStepsState.message !== 'Invalid form data' && suggestStepsState.message !== 'Analysis complete') {
      toast({ variant: 'destructive', title: 'Error', description: suggestStepsState.message });
    }
  }, [suggestStepsState, toast]);

  useEffect(() => {
    if (generatePlanState.message && generatePlanState.message !== 'Invalid form data' && generatePlanState.message !== 'Plan generated') {
        toast({ variant: 'destructive', title: 'Error', description: generatePlanState.message });
    }
  }, [generatePlanState, toast]);

  if (!report) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header title="Safety Report Not Found" />
        <main className="flex-1 p-4 md:p-8 flex items-center justify-center">
          <p>The requested safety report could not be found.</p>
        </main>
      </div>
    );
  }

  const handleInvestigationNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    if (report) {
        const updatedReport = { ...report, investigationNotes: e.target.value };
        handleReportUpdate(updatedReport);
    }
  };

  return (
    <div className="flex flex-col min-h-screen">
      <Header title={`Investigate Report: ${report.reportNumber}`} />
      <main className="flex-1 p-4 md:p-8 space-y-8 max-w-6xl mx-auto">
        <Card>
            <CardHeader>
                <CardTitle>{report.heading}</CardTitle>
                <div className="flex gap-2 pt-1">
                    <Badge variant="outline">{report.type}</Badge>
                    {report.subCategory && <Badge variant="secondary">{report.subCategory}</Badge>}
                </div>
            </CardHeader>
            <CardContent className="space-y-4">
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Report #</span>
                        <span className="font-mono">{report.reportNumber}</span>
                    </div>
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Status</span>
                        <Badge variant={getStatusVariant(report.status)}>{report.status}</Badge>
                    </div>
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Occurrence Date</span>
                        <span>{report.occurrenceDate}</span>
                    </div>
                        <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Filed Date</span>
                        <span>{report.filedDate}</span>
                    </div>
                        <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Submitted By</span>
                        <span>{report.submittedBy}</span>
                    </div>
                    {report.aircraftInvolved && (
                        <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Aircraft</span>
                            <span>{report.aircraftInvolved}</span>
                        </div>
                    )}
                </div>
                 <div className="space-y-2 pt-2">
                    <h4 className="font-semibold">Details</h4>
                    <p className="text-sm text-muted-foreground p-3 bg-muted rounded-md">{report.details}</p>
                </div>
            </CardContent>
        </Card>
        
        <Card>
            <CardHeader>
                <CardTitle className="flex items-center gap-2">
                    Classification
                    <TooltipProvider>
                        <Tooltip>
                            <TooltipTrigger asChild>
                                <Button variant="ghost" size="icon" className="h-5 w-5">
                                    <Info className="h-4 w-4 text-muted-foreground" />
                                </Button>
                            </TooltipTrigger>
                            <TooltipContent className="max-w-xs md:max-w-md" align="start">
                                <div className="grid grid-cols-2 gap-x-4 gap-y-1 p-2">
                                    {Object.entries(ICAO_CODE_DEFINITIONS).map(([code, definition]) => (
                                        <div key={code} className="text-xs">
                                            <span className="font-bold">{code}:</span> {definition}
                                        </div>
                                    ))}
                                </div>
                            </TooltipContent>
                        </Tooltip>
                    </TooltipProvider>
                </CardTitle>
                <CardDescription>
                    Classify the report using the standard ICAO taxonomy for aviation occurrences.
                </CardDescription>
            </CardHeader>
            <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                        <Label htmlFor="occurrenceCategory">ICAO Classification</Label>
                        <Select name="occurrenceCategory" defaultValue={report.occurrenceCategory}>
                            <SelectTrigger id="occurrenceCategory">
                                <SelectValue placeholder="Select Occurrence Category" />
                            </SelectTrigger>
                            <SelectContent>
                                {ICAO_OCCURRENCE_CATEGORIES.map(cat => <SelectItem key={cat} value={cat}>{cat}</SelectItem>)}
                            </SelectContent>
                        </Select>
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="phaseOfFlight">Other</Label>
                        <Input id="phaseOfFlight" name="phaseOfFlight" placeholder="e.g., Climb, Cruise, Landing" defaultValue={report.phaseOfFlight} />
                    </div>
                </div>
            </CardContent>
        </Card>

        <RiskAssessmentModule report={report} onUpdate={handleReportUpdate} />

        <Card>
            <CardHeader>
                <CardTitle>Investigation Workbench</CardTitle>
                <CardDescription>
                    Add notes, assign investigators, and use AI to suggest investigation steps.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
                <InvestigationTeamForm report={report} />
                <Separator />
                <DiscussionSection report={report} onUpdate={handleReportUpdate} />
                <Separator />
                <div className="space-y-2">
                    <Label htmlFor="investigationNotes">Investigation Notes</Label>
                    <Textarea
                        id="investigationNotes"
                        name="investigationNotes"
                        placeholder="Add your investigation notes, findings, and root cause analysis here..."
                        className="min-h-[150px]"
                        value={report.investigationNotes || ''}
                        onChange={handleInvestigationNotesChange}
                    />
                </div>
            </CardContent>
            <CardFooter className="flex flex-wrap justify-end gap-2">
                 <form action={suggestStepsFormAction}>
                    <input type="hidden" name="report" value={JSON.stringify(report)} />
                    <SuggestStepsButton />
                 </form>
                 <form action={generatePlanFormAction}>
                    <input type="hidden" name="report" value={JSON.stringify(report)} />
                    <GeneratePlanButton />
                 </form>
            </CardFooter>
        </Card>

        {suggestStepsState.data && <InvestigationAnalysisResult data={suggestStepsState.data as SuggestInvestigationStepsOutput} />}
        {generatePlanState.data && <CorrectiveActionPlanResult data={generatePlanState.data as GenerateCorrectiveActionPlanOutput} reportStatus={report.status} onCloseReport={handleCloseReport} />}
      </main>
    </div>
  );
}
    

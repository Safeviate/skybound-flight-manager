
'use client';

import { useFormState, useFormStatus } from 'react-dom';
import Header from '@/components/layout/header';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { safetyReportData } from '@/lib/mock-data';
import type { SafetyReport, SuggestInvestigationStepsOutput } from '@/lib/types';
import { suggestStepsAction } from './actions';
import { AlertCircle, ArrowRight, Bot, ClipboardList, Lightbulb, ListChecks, Loader2, User, Users } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useEffect } from 'react';
import { Separator } from '@/components/ui/separator';
import { InvestigationTeamForm } from './investigation-team-form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ICAO_OCCURRENCE_CATEGORIES, ICAO_PHASES_OF_FLIGHT } from '@/lib/types';


const getStatusVariant = (status: SafetyReport['status']) => {
  switch (status) {
    case 'Open': return 'destructive';
    case 'Under Review': return 'warning';
    case 'Closed': return 'success';
    default: return 'outline';
  }
};

function SubmitButton() {
    const { pending } = useFormStatus();
    return (
      <Button type="submit" disabled={pending}>
        {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Lightbulb className="mr-2 h-4 w-4" />}
        Suggest Investigation Steps
      </Button>
    );
}

function InvestigationAnalysisResult({ data }: { data: SuggestInvestigationStepsOutput }) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Bot /> AI-Suggested Investigation Plan</CardTitle>
          <CardDescription>
            This plan was generated by AI to guide your investigation. Always use your professional judgment.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div>
            <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><ClipboardList /> Initial Assessment</h3>
            <p className="text-muted-foreground bg-muted p-3 rounded-md">{data.initialAssessment}</p>
          </div>
          <div className="grid md:grid-cols-2 gap-6">
             <div>
                <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><ListChecks /> Key Areas to Investigate</h3>
                <ul className="list-disc list-inside space-y-1 text-muted-foreground">
                    {data.keyAreasToInvestigate.map((item, i) => <li key={i}>{item}</li>)}
                </ul>
             </div>
             <div>
                <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><AlertCircle /> Recommended Immediate Actions</h3>
                <ul className="list-disc list-inside space-y-1 text-muted-foreground">
                    {data.recommendedActions.map((item, i) => <li key={i}>{item}</li>)}
                </ul>
             </div>
          </div>
           <div>
            <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><Users /> Potential Contributing Factors</h3>
            <div className="flex flex-wrap gap-2">
                {data.potentialContributingFactors.map((item, i) => <Badge key={i} variant="secondary">{item}</Badge>)}
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

export default function SafetyReportInvestigationPage({ params }: { params: { reportId: string } }) {
  const report = safetyReportData.find(r => r.id === params.reportId);
  const { toast } = useToast();
  
  const initialState = {
    message: '',
    data: null,
    errors: null,
  };
  const [state, formAction] = useFormState(suggestStepsAction, initialState);

  useEffect(() => {
    if (state.message && state.message !== 'Invalid form data' && state.message !== 'Analysis complete') {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: state.message,
      });
    }
  }, [state, toast]);

  if (!report) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header title="Safety Report Not Found" />
        <main className="flex-1 p-4 md:p-8 flex items-center justify-center">
          <p>The requested safety report could not be found.</p>
        </main>
      </div>
    );
  }

  return (
    <div className="flex flex-col min-h-screen">
      <Header title={`Investigate Report: ${report.reportNumber}`} />
      <main className="flex-1 p-4 md:p-8 space-y-8 max-w-4xl mx-auto">
        <Card>
            <CardHeader>
                <CardTitle>{report.heading}</CardTitle>
                <CardDescription>{report.type}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Report #</span>
                        <span className="font-mono">{report.reportNumber}</span>
                    </div>
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Status</span>
                        <Badge variant={getStatusVariant(report.status)}>{report.status}</Badge>
                    </div>
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Occurrence Date</span>
                        <span>{report.occurrenceDate}</span>
                    </div>
                        <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Filed Date</span>
                        <span>{report.filedDate}</span>
                    </div>
                        <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Submitted By</span>
                        <span>{report.submittedBy}</span>
                    </div>
                    {report.aircraftInvolved && (
                        <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Aircraft</span>
                            <span>{report.aircraftInvolved}</span>
                        </div>
                    )}
                </div>
                <div className="space-y-2 pt-2">
                    <h4 className="font-semibold">Details</h4>
                    <p className="text-sm text-muted-foreground p-3 bg-muted rounded-md">{report.details}</p>
                </div>
            </CardContent>
        </Card>

        <Card>
            <CardHeader>
                <CardTitle>Investigation Workbench</CardTitle>
                <CardDescription>
                    Add notes, assign investigators, classify the report, and use AI to suggest investigation steps.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
                <InvestigationTeamForm report={report} />
                <Separator />
                <form action={formAction} className="space-y-4">
                    <div className="space-y-4">
                        <Label>ICAO ADREP Classification</Label>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                             <Select name="occurrenceCategory" defaultValue={report.occurrenceCategory}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select Occurrence Category" />
                                </SelectTrigger>
                                <SelectContent>
                                    {ICAO_OCCURRENCE_CATEGORIES.map(cat => <SelectItem key={cat} value={cat}>{cat}</SelectItem>)}
                                </SelectContent>
                            </Select>
                            <Select name="phaseOfFlight" defaultValue={report.phaseOfFlight}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select Phase of Flight" />
                                </SelectTrigger>
                                <SelectContent>
                                    {ICAO_PHASES_OF_FLIGHT.map(phase => <SelectItem key={phase} value={phase}>{phase}</SelectItem>)}
                                </SelectContent>
                            </Select>
                        </div>
                    </div>
                    <Separator />
                    <input type="hidden" name="report" value={JSON.stringify(report)} />
                    <div className="space-y-2">
                        <Label htmlFor="investigationNotes">Investigation Notes</Label>
                        <Textarea
                            id="investigationNotes"
                            name="investigationNotes"
                            placeholder="Add your investigation notes, findings, and root cause analysis here..."
                            className="min-h-[150px]"
                        />
                    </div>
                    <div className="flex justify-end">
                        <SubmitButton />
                    </div>
                </form>
            </CardContent>
            </Card>
            {state.data && <InvestigationAnalysisResult data={state.data as SuggestInvestigationStepsOutput} />}
      </main>
    </div>
  );
}



'use client';

import { useActionState, useEffect, useState } from 'react';
import React from 'react';
import { useFormStatus } from 'react-dom';
import Header from '@/components/layout/header';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { safetyReportData as initialSafetyReports, userData } from '@/lib/mock-data';
import type { SafetyReport, SuggestInvestigationStepsOutput, GenerateCorrectiveActionPlanOutput, CorrectiveAction, Risk as RiskRegisterEntry } from '@/lib/types';
import { suggestStepsAction, generatePlanAction } from './actions';
import { AlertCircle, ArrowLeft, ArrowRight, Bot, ClipboardList, Info, Lightbulb, ListChecks, Loader2, User, Users, FileText, Target, Milestone, Upload, MoreHorizontal, CheckCircle, ShieldCheck, MapPin, PlusCircle as PlusCircleIcon, Trash2, Calendar as CalendarIcon, Edit, Save, Printer } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Separator } from '@/components/ui/separator';
import { InvestigationTeamForm } from './investigation-team-form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ICAO_OCCURRENCE_CATEGORIES, ICAO_PHASES_OF_FLIGHT } from '@/lib/types';
import { DiscussionSection } from './discussion-section';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { ICAO_CODE_DEFINITIONS } from '@/lib/icao-codes';
import { Input } from '@/components/ui/input';
import { InitialRiskAssessment } from './initial-risk-assessment';
import { MitigatedRiskAssessment } from './mitigated-risk-assessment';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { differenceInDays, format, parseISO } from 'date-fns';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover';
import { Calendar } from '@/components/ui/calendar';
import { cn } from '@/lib/utils.tsx';
import Link from 'next/link';


const getStatusVariant = (status: SafetyReport['status']) => {
  switch (status) {
    case 'Open': return 'destructive';
    case 'Under Review': return 'warning';
    case 'Closed': return 'success';
    default: return 'outline';
  }
};

function SuggestStepsButton() {
    const { pending } = useFormStatus();
    return (
      <Button type="submit" disabled={pending}>
        {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Lightbulb className="mr-2 h-4 w-4" />}
        Suggest Investigation Steps
      </Button>
    );
}

function GeneratePlanButton() {
    const { pending } = useFormStatus();
    return (
      <Button variant="secondary" type="submit" disabled={pending}>
        {pending ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <FileText className="mr-2 h-4 w-4" />}
        Generate Corrective Action Plan
      </Button>
    );
}

function InvestigationAnalysisResult({ data }: { data: SuggestInvestigationStepsOutput }) {
    return (
      <Card className="mt-6">
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Bot /> AI-Suggested Investigation Plan</CardTitle>
          <CardDescription>
            This plan was generated by AI to guide your investigation. Always use your professional judgment.
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div>
            <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><ClipboardList /> Initial Assessment</h3>
            <p className="text-muted-foreground bg-muted p-3 rounded-md">{data.initialAssessment}</p>
          </div>
          <div className="grid md:grid-cols-2 gap-6">
             <div>
                <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><ListChecks /> Key Areas to Investigate</h3>
                <ul className="list-disc list-inside space-y-1 text-muted-foreground">
                    {data.keyAreasToInvestigate.map((item, i) => <li key={i}>{item}</li>)}
                </ul>
             </div>
             <div>
                <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><AlertCircle /> Recommended Immediate Actions</h3>
                <ul className="list-disc list-inside space-y-1 text-muted-foreground">
                    {data.recommendedActions.map((item, i) => <li key={i}>{item}</li>)}
                </ul>
             </div>
          </div>
           <div>
            <h3 className="font-semibold text-lg flex items-center gap-2 mb-2"><Users /> Potential Contributing Factors</h3>
            <div className="flex flex-wrap gap-2">
                {data.potentialContributingFactors.map((item, i) => <Badge key={i} variant="secondary">{item}</Badge>)}
            </div>
          </div>
        </CardContent>
      </Card>
    );
}

interface CorrectiveActionPlanResultProps {
    plan: GenerateCorrectiveActionPlanOutput;
    setPlan: React.Dispatch<React.SetStateAction<GenerateCorrectiveActionPlanOutput | null>>;
    report: SafetyReport;
    onCloseReport: () => void;
}

function CorrectiveActionPlanResult({ plan, setPlan, report, onCloseReport }: CorrectiveActionPlanResultProps) {
    const [editingActionId, setEditingActionId] = useState<string | null>(null);
    const [isEditingSummary, setIsEditingSummary] = useState(false);
    const [isEditingRootCause, setIsEditingRootCause] = useState(false);
    const { toast } = useToast();
    
    const handleActionChange = <K extends keyof CorrectiveAction>(index: number, field: K, value: CorrectiveAction[K]) => {
        const updatedActions = [...plan.correctiveActions];
        updatedActions[index] = { ...updatedActions[index], [field]: value };
        setPlan(prev => prev ? ({ ...prev, correctiveActions: updatedActions }) : null);
    };

    const handleAddAction = () => {
        const newAction: CorrectiveAction & { id: string } = {
            id: `new-${Date.now()}`,
            action: '',
            responsiblePerson: '',
            deadline: new Date().toISOString().split('T')[0],
            status: 'Not Started',
        };
        setPlan(prev => prev ? ({ ...prev, correctiveActions: [...prev.correctiveActions, newAction] }) : null);
        setEditingActionId(newAction.id);
    };

    const handleRemoveAction = (index: number) => {
        const updatedActions = plan.correctiveActions.filter((_, i) => i !== index);
        setPlan(prev => prev ? ({ ...prev, correctiveActions: updatedActions }) : null);
    };

    const getStatusVariant = (status: string) => {
        switch(status) {
            case 'Completed': return 'success';
            case 'In Progress': return 'warning';
            default: return 'outline';
        }
    };
    
    const allActionsCompleted = plan.correctiveActions.every(action => action.status === 'Completed');

    const ActionRow = ({ action, index }: { action: CorrectiveAction & { id?: string }, index: number }) => {
        const isEditing = editingActionId === action.id;
        
        const handleSave = () => {
             // Basic validation
            if (!action.action || !action.responsiblePerson) {
                toast({ variant: 'destructive', title: 'Error', description: 'Action and Responsible Person cannot be empty.' });
                return;
            }
            setEditingActionId(null);
        };

        return (
            <TableRow>
                <TableCell>
                    {isEditing ? (
                        <Textarea
                            value={action.action}
                            onChange={(e) => handleActionChange(index, 'action', e.target.value)}
                            className="min-h-[60px]"
                        />
                    ) : (
                        <p className="text-sm">{action.action}</p>
                    )}
                </TableCell>
                <TableCell>
                    {isEditing ? (
                         <Select
                            value={action.responsiblePerson}
                            onValueChange={(value) => handleActionChange(index, 'responsiblePerson', value)}
                        >
                            <SelectTrigger>
                                <SelectValue placeholder="Select Person" />
                            </SelectTrigger>
                            <SelectContent>
                                {report.investigationTeam?.map(name => <SelectItem key={name} value={name}>{name}</SelectItem>)}
                            </SelectContent>
                        </Select>
                    ) : (
                       <p className="text-sm">{action.responsiblePerson}</p>
                    )}
                </TableCell>
                 <TableCell>
                    {isEditing ? (
                        <Popover>
                            <PopoverTrigger asChild>
                                <Button variant="outline" className="w-full justify-start font-normal">
                                    <CalendarIcon className="mr-2 h-4 w-4" />
                                    {format(parseISO(action.deadline), "MMM d, yyyy")}
                                </Button>
                            </PopoverTrigger>
                            <PopoverContent>
                                <Calendar
                                    mode="single"
                                    selected={parseISO(action.deadline)}
                                    onSelect={(date) => date && handleActionChange(index, 'deadline', date.toISOString().split('T')[0])}
                                    initialFocus
                                />
                            </PopoverContent>
                        </Popover>
                    ) : (
                         <p className="text-sm">{format(parseISO(action.deadline), "MMM d, yyyy")}</p>
                    )}
                </TableCell>
                <TableCell>
                     {isEditing ? (
                         <Select
                            value={action.status}
                            onValueChange={(value: CorrectiveAction['status']) => handleActionChange(index, 'status', value)}
                        >
                            <SelectTrigger>
                                 <SelectValue placeholder="Select Status" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="Not Started">Not Started</SelectItem>
                                <SelectItem value="In Progress">In Progress</SelectItem>
                                <SelectItem value="Completed">Completed</SelectItem>
                            </SelectContent>
                        </Select>
                    ) : (
                        <Badge variant={getStatusVariant(action.status)}>{action.status}</Badge>
                    )}
                </TableCell>
                <TableCell className="text-right no-print">
                    <div className="flex gap-1 justify-end">
                        {isEditing ? (
                            <Button size="icon" onClick={handleSave} variant="ghost"><Save className="h-4 w-4 text-primary" /></Button>
                        ) : (
                            <Button size="icon" onClick={() => setEditingActionId(action.id || null)} variant="ghost" disabled={report.status === 'Closed'}><Edit className="h-4 w-4" /></Button>
                        )}
                        <Button variant="ghost" size="icon" onClick={() => handleRemoveAction(index)} disabled={report.status === 'Closed' || isEditing}>
                            <Trash2 className="h-4 w-4 text-destructive" />
                        </Button>
                    </div>
                </TableCell>
            </TableRow>
        )
    };

    return (
        <Card>
            <CardHeader>
                <CardTitle className="flex items-center gap-2"><Bot /> Corrective Action Plan</CardTitle>
                <CardDescription>
                    This is the corrective action plan for the report. You can edit the details below.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
                <div>
                    <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-lg flex items-center gap-2"><FileText /> Summary of Findings</h3>
                        <Button variant="ghost" size="sm" onClick={() => setIsEditingSummary(!isEditingSummary)} className="no-print">
                            {isEditingSummary ? <Save className="mr-2 h-4 w-4" /> : <Edit className="mr-2 h-4 w-4" />}
                            {isEditingSummary ? 'Save' : 'Edit'}
                        </Button>
                    </div>
                     {isEditingSummary ? (
                        <Textarea
                            value={plan.summaryOfFindings}
                            onChange={(e) => setPlan(prev => prev ? { ...prev, summaryOfFindings: e.target.value } : null)}
                            className="min-h-[100px]"
                        />
                    ) : (
                        <p className="text-muted-foreground bg-muted p-3 rounded-md">{plan.summaryOfFindings}</p>
                    )}
                </div>
                <div>
                     <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-lg flex items-center gap-2"><Target /> Root Cause Analysis</h3>
                        <Button variant="ghost" size="sm" onClick={() => setIsEditingRootCause(!isEditingRootCause)} className="no-print">
                            {isEditingRootCause ? <Save className="mr-2 h-4 w-4" /> : <Edit className="mr-2 h-4 w-4" />}
                            {isEditingRootCause ? 'Save' : 'Edit'}
                        </Button>
                    </div>
                     {isEditingRootCause ? (
                        <Textarea
                            value={plan.rootCause}
                            onChange={(e) => setPlan(prev => prev ? { ...prev, rootCause: e.target.value } : null)}
                            className="min-h-[80px]"
                        />
                    ) : (
                        <p className="text-muted-foreground bg-muted p-3 rounded-md">{plan.rootCause}</p>
                    )}
                </div>
                <div>
                    <div className="flex items-center justify-between mb-2">
                        <h3 className="font-semibold text-lg flex items-center gap-2"><Milestone /> Corrective Actions</h3>
                        <Button variant="outline" size="sm" onClick={handleAddAction} disabled={report.status === 'Closed' || editingActionId !== null} className="no-print">
                            <PlusCircleIcon className="mr-2 h-4 w-4" />
                            Add Action
                        </Button>
                    </div>
                    <div className="overflow-x-auto border rounded-lg">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead className="w-[40%]">Action</TableHead>
                                    <TableHead>Responsible</TableHead>
                                    <TableHead>Deadline</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead className="text-right no-print">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {plan.correctiveActions.map((action, i) => (
                                    <ActionRow
                                        key={(action as any).id || i}
                                        action={{ id: (action as any).id || `action-${i}`, ...action }}
                                        index={i}
                                    />
                                ))}
                            </TableBody>
                        </Table>
                    </div>
                </div>
            </CardContent>
             {allActionsCompleted && report.status !== 'Closed' && (
                <CardFooter className="flex justify-end gap-2 no-print">
                    <Button variant="outline">Save Plan</Button>
                    <Button onClick={onCloseReport}>
                        <CheckCircle className="mr-2 h-4 w-4" />
                        Close & Archive Report
                    </Button>
                </CardFooter>
            )}
        </Card>
    );
}

const PrintableReport = ({ report, correctiveActionPlan, onUpdate, onPromoteRisk }: { report: SafetyReport, correctiveActionPlan: GenerateCorrectiveActionPlanOutput | null, onUpdate: (report: SafetyReport) => void, onPromoteRisk: (risk: RiskRegisterEntry) => void }) => (
    <div className="space-y-8">
        <Card>
            <CardHeader>
                <CardTitle>{report.heading}</CardTitle>
                <div className="flex gap-2 pt-1">
                    <Badge variant="outline">{report.type}</Badge>
                    {report.subCategory && <Badge variant="secondary">{report.subCategory}</Badge>}
                </div>
            </CardHeader>
            <CardContent className="space-y-4">
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Report #</span>
                        <span className="font-mono">{report.reportNumber}</span>
                    </div>
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Status</span>
                        <Badge variant={getStatusVariant(report.status)}>{report.status}</Badge>
                    </div>
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Occurrence Date</span>
                        <span>{report.occurrenceDate}</span>
                    </div>
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Filed Date</span>
                        <span>{report.filedDate}</span>
                    </div>
                    <div className="flex justify-between items-start flex-col">
                        <span className="font-semibold text-muted-foreground text-sm">Submitted By</span>
                        <span>{report.submittedBy}</span>
                    </div>
                    {report.aircraftInvolved && (
                        <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Aircraft</span>
                            <span>{report.aircraftInvolved}</span>
                        </div>
                    )}
                     {report.location && (
                        <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Location</span>
                            <span>{report.location}</span>
                        </div>
                    )}
                </div>
                 <div className="space-y-2 pt-2">
                    <h4 className="font-semibold">Details</h4>
                    <p className="text-sm text-muted-foreground p-3 bg-muted rounded-md">{report.details}</p>
                </div>
            </CardContent>
            <CardFooter>
                 <div className="grid grid-cols-1 md:grid-cols-3 items-end gap-4 w-full">
                    <div className="space-y-2">
                        <div className="flex items-center gap-2">
                            <Label htmlFor="occurrenceCategory">ICAO Occurrence Category</Label>
                        </div>
                        <Input readOnly value={report.occurrenceCategory || 'N/A'} />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="phaseOfFlight">Phase of Flight</Label>
                      <Input readOnly value={report.phaseOfFlight || 'N/A'} />
                    </div>
                </div>
            </CardFooter>
        </Card>
        <Card>
            <CardHeader>
                <CardTitle>Investigation</CardTitle>
            </CardHeader>
            <CardContent>
                <div className="space-y-2">
                    <Label>Investigation Notes &amp; Findings</Label>
                    <p className="text-sm text-muted-foreground p-3 bg-muted rounded-md min-h-[150px] whitespace-pre-wrap">{report.investigationNotes || 'No notes entered.'}</p>
                </div>
            </CardContent>
        </Card>
        <InitialRiskAssessment report={report} onUpdate={onUpdate} onPromoteRisk={onPromoteRisk} />
        {correctiveActionPlan && (
            <>
                <CorrectiveActionPlanResult 
                    plan={correctiveActionPlan} 
                    setPlan={() => {}} // dummy function for print
                    report={report} 
                    onCloseReport={() => {}} // dummy
                />
                <MitigatedRiskAssessment 
                    report={report} 
                    onUpdate={onUpdate} 
                    correctiveActions={correctiveActionPlan?.correctiveActions}
                />
            </>
        )}
    </div>
);


export default function SafetyReportInvestigationPage({ params }: { params: { reportId: string } }) {
  const [safetyReports, setSafetyReports] = useState(initialSafetyReports);
  const report = safetyReports.find(r => r.id === params.reportId);
  const { toast } = useToast();
  
  const [suggestStepsState, suggestStepsFormAction] = useActionState(suggestStepsAction, { message: '', data: null, errors: null });
  const [generatePlanState, generatePlanFormAction] = useActionState(generatePlanAction, { message: '', data: null, errors: null });
  const [correctiveActionPlan, setCorrectiveActionPlan] = useState<GenerateCorrectiveActionPlanOutput | null>(() => {
    // This is a mock to show the CAP if it were saved. In a real app this would be loaded from a DB.
    if (params.reportId === 'sr1') {
      return {
        summaryOfFindings: 'The investigation confirmed that a bird passed dangerously close to the aircraft on final approach. The flight crew exercised good judgment in reporting the incident, and the post-flight inspection correctly found no damage. The primary contributing factor was a gap in communication regarding known bird activity.',
        rootCause: 'Failure to disseminate a general bird activity warning from ATC to the specific flight crew during pre-flight or approach briefing.',
        correctiveActions: [
          { action: 'Review and update the pre-flight briefing checklist to include a mandatory check for bird activity advisories.', responsiblePerson: 'Mike Ross', deadline: '2024-09-01', status: 'In Progress' },
          { action: 'Implement a procedure for the tower to provide specific bird advisories to aircraft on final approach when activity is known.', responsiblePerson: 'John Smith', deadline: '2024-09-15', status: 'Not Started' },
        ]
      }
    }
    return null;
  });

  useEffect(() => {
    if (generatePlanState.data && !correctiveActionPlan) {
        const data = generatePlanState.data as GenerateCorrectiveActionPlanOutput;
        const actionsWithIds = data.correctiveActions.map((action, index) => ({...action, id: `action-${index}`}));
        setCorrectiveActionPlan({ ...data, correctiveActions: actionsWithIds as any });
    }
  }, [generatePlanState.data, correctiveActionPlan]);

  const handleReportUpdate = (updatedReport: SafetyReport) => {
    setSafetyReports(prevReports => prevReports.map(r => r.id === updatedReport.id ? updatedReport : r));
  };
  
  const handlePromoteRisk = (newRisk: RiskRegisterEntry) => {
    // In a real app, this would be an API call to a central store.
    // For this mock, we can't easily update the state of the parent page.
    // We will show a toast message and the local state will reflect the promotion.
    // A more robust solution might use a global state manager (e.g., Context, Redux).
     toast({
        title: 'Risk Promoted to Central Register',
        description: `"${newRisk.description}" is now being tracked centrally. You can view it on the main Safety page.`,
    });
  };

  const handleCloseReport = () => {
    if (report) {
      const updatedReport = { ...report, status: 'Closed' as SafetyReport['status'] };
      handleReportUpdate(updatedReport);
      toast({
        title: "Report Closed",
        description: `Report ${report.reportNumber} has been successfully closed and archived.`
      });
    }
  };
  
  useEffect(() => {
    if (suggestStepsState.message && suggestStepsState.message !== 'Invalid form data' && suggestStepsState.message !== 'Analysis complete') {
      toast({ variant: 'destructive', title: 'Error', description: suggestStepsState.message });
    }
  }, [suggestStepsState, toast]);

  useEffect(() => {
    if (generatePlanState.message && generatePlanState.message !== 'Invalid form data' && generatePlanState.message !== 'Plan generated') {
        toast({ variant: 'destructive', title: 'Error', description: generatePlanState.message });
    }
  }, [generatePlanState, toast]);

  if (!report) {
    return (
      <div className="flex flex-col min-h-screen">
        <Header title="Safety Report Not Found" />
        <main className="flex-1 p-4 md:p-8 flex items-center justify-center">
          <p>The requested safety report could not be found.</p>
        </main>
      </div>
    );
  }

  const handleInvestigationNotesChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    if (report) {
        const updatedReport = { ...report, investigationNotes: e.target.value };
        handleReportUpdate(updatedReport);
    }
  };

  const handleClassificationChange = (field: 'occurrenceCategory' | 'phaseOfFlight', value: string) => {
    if (report) {
      const updatedReport = { ...report, [field]: value };
      handleReportUpdate(updatedReport);
    }
  };


  return (
    <div className="flex flex-col min-h-screen">
      <Header title={`Investigate Report: ${report.reportNumber}`}>
        <Button asChild variant="outline" className="no-print">
            <Link href="/safety?tab=reports">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Back to All Reports
            </Link>
        </Button>
        <div className="flex items-center gap-4">
            <Button variant="outline" onClick={() => window.print()} className="no-print">
                <Printer className="mr-2 h-4 w-4" />
                Print Report
            </Button>
        </div>
      </Header>
      <main className="flex-1 p-4 md:p-8 space-y-8 max-w-6xl mx-auto">
        <div className="no-print">
            <Card>
                <CardHeader>
                    <CardTitle>{report.heading}</CardTitle>
                    <div className="flex gap-2 pt-1">
                        <Badge variant="outline">{report.type}</Badge>
                        {report.subCategory && <Badge variant="secondary">{report.subCategory}</Badge>}
                    </div>
                </CardHeader>
                <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                        <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Report #</span>
                            <span className="font-mono">{report.reportNumber}</span>
                        </div>
                        <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Status</span>
                            <Badge variant={getStatusVariant(report.status)}>{report.status}</Badge>
                        </div>
                        <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Occurrence Date</span>
                            <span>{report.occurrenceDate}</span>
                        </div>
                            <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Filed Date</span>
                            <span>{report.filedDate}</span>
                        </div>
                            <div className="flex justify-between items-start flex-col">
                            <span className="font-semibold text-muted-foreground text-sm">Submitted By</span>
                            <span>{report.submittedBy}</span>
                        </div>
                        {report.aircraftInvolved && (
                            <div className="flex justify-between items-start flex-col">
                                <span className="font-semibold text-muted-foreground text-sm">Aircraft</span>
                                <span>{report.aircraftInvolved}</span>
                            </div>
                        )}
                        {report.location && (
                            <div className="flex justify-between items-start flex-col">
                                <span className="font-semibold text-muted-foreground text-sm">Location</span>
                                <span>{report.location}</span>
                            </div>
                        )}
                    </div>
                    <div className="space-y-2 pt-2">
                        <h4 className="font-semibold">Details</h4>
                        <p className="text-sm text-muted-foreground p-3 bg-muted rounded-md">{report.details}</p>
                    </div>
                </CardContent>
                <CardFooter>
                    <div className="grid grid-cols-1 md:grid-cols-3 items-end gap-4 w-full">
                        <div className="space-y-2">
                            <div className="flex items-center gap-2">
                                <Label htmlFor="occurrenceCategory">ICAO Occurrence Category</Label>
                                <TooltipProvider>
                                    <Tooltip>
                                        <TooltipTrigger asChild>
                                        <Button variant="ghost" size="icon" className="h-5 w-5 no-print">
                                                <Info className="h-4 w-4 text-muted-foreground" />
                                        </Button>
                                        </TooltipTrigger>
                                        <TooltipContent className="max-w-xs md:max-w-md" align="start">
                                            <div className="grid grid-cols-2 gap-x-4 gap-y-1 p-2">
                                                {Object.entries(ICAO_CODE_DEFINITIONS).map(([code, definition]) => (
                                                    <div key={code} className="text-xs">
                                                        <span className="font-bold">{code}:</span> {definition}
                                                    </div>
                                                ))}
                                            </div>
                                        </TooltipContent>
                                    </Tooltip>
                                </TooltipProvider>
                            </div>
                            <Select 
                            name="occurrenceCategory" 
                            defaultValue={report.occurrenceCategory}
                            onValueChange={(value) => handleClassificationChange('occurrenceCategory', value)}
                            >
                                <SelectTrigger id="occurrenceCategory">
                                    <SelectValue placeholder="Select Category" />
                                </SelectTrigger>
                                <SelectContent>
                                    {ICAO_OCCURRENCE_CATEGORIES.map(cat => <SelectItem key={cat} value={cat}>{cat}</SelectItem>)}
                                </SelectContent>
                            </Select>
                        </div>
                        <div className="space-y-2">
                        <Label htmlFor="phaseOfFlight">Phase of Flight</Label>
                        <Select 
                            name="phaseOfFlight" 
                            defaultValue={report.phaseOfFlight}
                            onValueChange={(value) => handleClassificationChange('phaseOfFlight', value)}
                        >
                            <SelectTrigger id="phaseOfFlight">
                                <SelectValue placeholder="Select Phase" />
                            </SelectTrigger>
                            <SelectContent>
                                {ICAO_PHASES_OF_FLIGHT.map(phase => <SelectItem key={phase} value={phase}>{phase}</SelectItem>)}
                            </SelectContent>
                        </Select>
                        </div>
                    </div>
                </CardFooter>
            </Card>
            
            <Tabs defaultValue="investigation" className="w-full">
                <TabsList className="no-print">
                    <TabsTrigger value="investigation">Investigation</TabsTrigger>
                    <TabsTrigger value="risk-assessment">Risk Assessment</TabsTrigger>
                    <TabsTrigger value="ai">AI Assistant</TabsTrigger>
                    <TabsTrigger value="plan">Corrective Action Plan</TabsTrigger>
                </TabsList>
                <TabsContent value="investigation">
                    <Card>
                        <CardHeader>
                            <CardTitle>Investigation Workbench</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            <div className="no-print">
                                <InvestigationTeamForm report={report} />
                                <Separator className="my-6" />
                                <DiscussionSection report={report} onUpdate={handleReportUpdate} />
                                <Separator className="my-6" />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="investigationNotes">Investigation Notes &amp; Findings</Label>
                                <Textarea
                                    id="investigationNotes"
                                    name="investigationNotes"
                                    placeholder="Add your investigation notes, findings, and root cause analysis here..."
                                    className="min-h-[150px]"
                                    value={report.investigationNotes || ''}
                                    onChange={handleInvestigationNotesChange}
                                />
                            </div>
                        </CardContent>
                    </Card>
                </TabsContent>
                <TabsContent value="risk-assessment">
                    <InitialRiskAssessment report={report} onUpdate={handleReportUpdate} onPromoteRisk={handlePromoteRisk} />
                </TabsContent>
                <TabsContent value="ai">
                    <Card>
                        <CardHeader>
                            <CardTitle>AI Assistant</CardTitle>
                            <CardDescription>
                                Use generative AI to help with the investigation process.
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="flex flex-col sm:flex-row gap-4">
                                <div className="flex-1 p-4 border rounded-lg">
                                    <h3 className="font-semibold flex items-center gap-2"><Lightbulb/> Suggest Steps</h3>
                                    <p className="text-sm text-muted-foreground mt-1 mb-4">
                                        Get AI suggestions for how to proceed with the investigation based on the report details.
                                    </p>
                                    <form action={suggestStepsFormAction}>
                                        <input type="hidden" name="report" value={JSON.stringify(report)} />
                                        <SuggestStepsButton />
                                    </form>
                                </div>
                                <div className="flex-1 p-4 border rounded-lg">
                                    <h3 className="font-semibold flex items-center gap-2"><FileText/> Generate Plan</h3>
                                    <p className="text-sm text-muted-foreground mt-1 mb-4">
                                        Generate a complete corrective action plan based on all notes, discussion, and findings.
                                    </p>
                                    <form action={generatePlanFormAction}>
                                        <input type="hidden" name="report" value={JSON.stringify(report)} />
                                        <GeneratePlanButton />
                                    </form>
                                </div>
                            </div>
                            {suggestStepsState.data && <InvestigationAnalysisResult data={suggestStepsState.data as SuggestInvestigationStepsOutput} />}
                        </CardContent>
                    </Card>
                </TabsContent>
                <TabsContent value="plan" className="space-y-8">
                    {correctiveActionPlan ? (
                        <CorrectiveActionPlanResult 
                            plan={correctiveActionPlan} 
                            setPlan={setCorrectiveActionPlan}
                            report={report} 
                            onCloseReport={handleCloseReport} 
                        />
                    ) : (
                        <Card className="no-print">
                            <CardContent className="pt-6">
                                <div className="flex items-center justify-center h-40 border-2 border-dashed rounded-lg">
                                    <p className="text-muted-foreground">
                                        No action plan has been generated yet. Use the AI Assistant to create one.
                                    </p>
                                </div>
                            </CardContent>
                        </Card>
                    )}
                    <MitigatedRiskAssessment 
                        report={report} 
                        onUpdate={handleReportUpdate} 
                        correctiveActions={correctiveActionPlan?.correctiveActions}
                    />
                </TabsContent>
            </Tabs>
        </div>

        <div className="hidden print:block">
            <PrintableReport 
                report={report} 
                correctiveActionPlan={correctiveActionPlan} 
                onUpdate={handleReportUpdate} 
                onPromoteRisk={handlePromoteRisk} 
            />
        </div>

      </main>
    </div>
  );
}
